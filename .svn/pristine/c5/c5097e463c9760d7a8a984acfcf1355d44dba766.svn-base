import unittest as ut
from Histogram import ColorHistogram, GreyHistogram, Histogram
import numpy as np
import PIL.Image as im

#black_square = np.zeros((10,10,3))
#red_array = np.array([(150,0,0) for x in range(0,100)])
#red_square = np.reshape(red_array,(10,10,3))
red_square = im.open("red_square.jpg")
black_square = im.open("black_square.jpg")
"""TODO problem
When color value is 255, the histogram pass it to 0"""

class TestHistogram(ut.TestCase):
    
    def setUp(self):
        pass

    def test_init(self):
        histo1 = Histogram(black_square)
        self.assertIsInstance(histo1.histograms,GreyHistogram)
        self.assertNotIsInstance(histo1.histograms,ColorHistogram)

    def test_init2(self):
        histo1 = Histogram(red_square)
        self.assertNotIsInstance(histo1.histograms,GreyHistogram)
        self.assertIsInstance(histo1.histograms,ColorHistogram)

class TestColorHistogram(ut.TestCase):


    def test_init(self):
        pass

    def test_histograms_lenght(self):
        histo1 = Histogram(red_square)
        self.assertEqual(len(histo1.histograms.get_red()), histo1.bins)
        self.assertEqual(len(histo1.histograms.get_green()), histo1.bins)
        self.assertEqual(len(histo1.histograms.get_blue()), histo1.bins)

    def test_red_square(self):
        """TODO problem
        When color value is 255, the histogram pass it to 0"""
        histo1 = Histogram(red_square)

        expected_red = [0 for i in range(256)]
        expected_red[255] = 10000
        #print(expected_red)
        #print(histo1.histograms.get_red())
        self.assertListEqual(list(histo1.histograms.redHistogram[0]),expected_red)

        #histo1 = Histogram(red_square)
        #expected_blue_green = [0 for i in range(256)]
        #expected_blue_green[0] = 100
        #
        #self.assertListEqual(list(histo1.histograms.get_blue()),expected_blue_green)
        #self.assertListEqual(list(histo1.histograms.get_green()),expected_blue_green)

        #Red histograms from get_red() doesn't seem to work correctly
        #expected_red = [0 for i in range(256)]
        #expected_red[254] = 100
        #print(expected_red)
        #print(histo1.histograms.get_red())
        #self.assertListEqual(list(histo1.histograms.redHistogram[0]),expected_red)
        pass



class TestGreyHistogram(ut.TestCase):

    def test_init(self):
        pass

    def test_get_grey(self):
        """DOESN'T work"""
        histo1 = Histogram(black_square)
        expected_result = [0 for i in range(256)]
        expected_result[0] = 100
        self.assertListEqual(list(histo1.histograms.get_grey()),expected_result)


        #histo2 = Histogram(255 - black_square)
        #print(255- black_square)
        #expected_result = [0 for i in range(256)]
        #expected_result[255] = 100
        #self.assertListEqual(list(histo2.histograms.get_grey()),expected_result)
        pass



if __name__ == '__main__':
    ut.main()