# -*- coding: utf-8 -*-
"""
@author: Eyal Cohen
"""
from argparse import ArgumentParser
import pathlib
import os
from sys import argv
import re
from Image import Saver

class CLI():
    """
    The CLI class represents the Command-Line Interface.
    Meaning that it is instanciated when calling the program as a command line.
    The syntax of the command line is :
        --file, -f, the name of the file containing the image to process
        --database, -db, the path to the database, represented by a directory
        full of images, or full of directories full of images, etc. (Please avoid
        to much depth, as it would slow the program), for more information see documentation
        of Database.py
        --depth, -d, the number of images supposed to be returned by the retrieval
        --bins, -b, the number of bins when creating an Histogram (see Histogram.py)
        --save, -s, the directory in which the images from the retrieval will be saved
        --noadd, if present will negate the operation of adding the image used to the database
        --incremental, if present will use the incremental intersection algorithm instead of the
        normal intersection
        --grey, if present will use grey scale histograms instead color histograms
        --saveparams, if present will save the given parameters as default in the CLI.init file
    """
    def __init__(self):
        if not os.path.exists("./options"):
            os.mkdir("./options")
        if not os.path.exists("./options/CLI.init"):
            file = open("./options/CLI.init", "w+")
            file.write(DEFAULT_CLI_OPTIONS)
            file.close()
        else:
            self.default = open("./options/CLI.init", "r").read().split("\n")
        parser = ArgumentParser()
        parser.add_argument("--file", "-f", metavar = "<file>", type = pathlib.Path, default = self.parse_default_file())
        parser.add_argument("--database", "-db", metavar = "<path>", type = pathlib.Path, default = self.parse_default_database())
        parser.add_argument("--depth", "-d", type = int, metavar = "<depth>", default = self.parse_default_depth())
        parser.add_argument("--bins", "-b", type = int, metavar = "<bins number>", default = self.parse_default_bins())
        parser.add_argument("--save", "-s", metavar = "<directory>", type = Saver, default = self.parse_default_saver())
        parser.add_argument("--noadd", action = "store_false", default = self.parse_default_add())
        parser.add_argument("--incremental", action = "store_true", default = self.parse_default_incremental())
        parser.add_argument("--grey", "-g", action = "store_true", default = self.parse_default_grey())
        parser.add_argument("--saveparams", "-sp", action = "store_true", default = False)
        self._args, self._unknown = parser.parse_known_args(argv)
        self._unknown.remove(os.path.abspath("./CLI.py"))
        if self._args.saveparams:
            self._saveparams()
        
    def parse_default_file(self):
        for s in self.default:
            if re.match(r"file", s):
                if s.endswith("None"):
                    return(None)
                else:
                    return(pathlib.Path(s[s.index("=")+1:]))
        
    def parse_default_database(self):
        for s in self.default:
            if re.match(r"database", s):
                if s.endswith("None"):
                    return(None)
                else:
                    return(pathlib.Path(s[s.index("=")+1:]))
    
    def parse_default_depth(self):
        for s in self.default:
            if re.match(r"depth", s):
                if s.endswith("None"):
                    return(None)
                else:
                    return(int(s[s.index("=")+1:]))
    
    def parse_default_bins(self):
        for s in self.default:
            if re.match(r"bins", s):
                if s.endswith("None"):
                    return(None)
                else:
                    return(int(s[s.index("=")+1:]))
    
    def parse_default_saver(self):
        for s in self.default:
            if re.match(r"saver", s):
                if s.endswith("None"):
                    return(None)
                else:
                    return(Saver(s[s.index("=")+1:]))
    
    def parse_default_add(self):
        for s in self.default:
            if re.match(r"add", s):
                if s.endswith("None"):
                    return(None)
                else:
                    return(bool(s[s.index("=")+1:]))
    
    def parse_default_incremental(self):
        for s in self.default:
            if re.match(r"incremental", s):
                if s.endswith("None"):
                    return(None)
                else:
                    return(bool(s[s.index("=")+1:]))
    
    def parse_default_grey(self):
        for s in self.default:
            if re.match(r"grey", s):
                if s.endswith("None"):
                    return(None)
                else:
                    return(bool(s[s.index("=")+1:]))
    
    def _saveparams(self):
        with open("./options/CLI.init", "r") as options:
            data = options.read()
        with open("./options/CLI.init", "w") as options:
            if self._args.file != None:
                position = data.index("file")
                options.seek(position)
                try:
                    options.writelines(data[:position] + f"file = {self._args.file}\n"+data[data.index("\n")+1:])
                except ValueError:
                    options.writelines(data[:position] + f"file = {self._args.file}\n")
            if self._args.database != None:
                position = data.index("database")
                options.seek(position)
                try:
                    options.writelines(data[:position] + f"database = {self._args.database}\n" +data[data.index("\n", position)+1:])
                except ValueError:
                    options.writelines(data[:position] + f"database = {self._args.database}\n")
            if self._args.depth != None:
                position = data.index("depth")
                options.seek(position)
                try:
                    options.writelines(data[:position] + f"depth = {self._args.depth}\n" +data[data.index("\n", position)+1:])
                except ValueError:
                    options.writelines(data[:position] + f"depth = {self._args.depth}\n")
            if self._args.bins != None:
                position = data.index("bins")
                options.seek(position)
                try:
                    options.writelines(data[:position] + f"bins = {self._args.bins}\n" +data[data.index("\n", position)+1:])
                except ValueError:
                    options.writelines(data[:position] + f"bins = {self._args.bins}\n")
            if self._args.save != None:
                position = data.index("saver")
                options.seek(position)
                try:
                    options.writelines(data[:position] + f"saver = {self._args.save._directory}\n" +data[data.index("\n", position)+1:])
                except ValueError:
                    options.writelines(data[:position] + f"saver = {self._args.saver}\n")
            if self._args.noadd != None:
                position = data.index("add")
                options.seek(position)
                try:
                    options.writelines(data[:position] + f"noadd = {self._args.noadd}\n" +data[data.index("\n", position)+1:])
                except ValueError:
                    options.writelines(data[:position] + f"add = {self._args.add}\n")
            if self._args.database != None:
                position = data.index("incremental")
                options.seek(position)
                try:
                    options.writelines(data[:position] + f"incremental = {self._args.incremental}\n" +data[data.index("\n", position)+1:])
                except ValueError:
                    options.writelines(data[:position] + f"incremental = {self._args.incremental}\n")
            if self._args.database != None:
                position = data.index("grey")
                options.seek(position)
                try:
                    options.writelines(data[:position] + f"grey = {self._args.grey}\n" +data[data.index("\n", position)+1:])
                except ValueError:
                    options.writelines(data[:position] + f"grey = {self._args.grey}\n")
            
DEFAULT_CLI_OPTIONS = "file = None\ndatabase = None\ndepth = 15\nbins = 255\nsaver = None\nadd = true\nincremental = true\ngrey = false\nbackground_color = #554356\n"