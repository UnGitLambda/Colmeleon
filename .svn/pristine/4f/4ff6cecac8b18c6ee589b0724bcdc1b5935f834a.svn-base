import unittest as ut
from Histogram import ColorHistogram, GreyHistogram, Histogram
import numpy as np
import PIL.Image as im
import os


maindir = os.path.dirname(os.path.dirname(__file__))
unittestdir = os.path.join(maindir, 'UnitTesting','Histogram' )

expectation = [ 
    [os.path.join(unittestdir,'red_square.png' ) , True , False],
    [os.path.join(unittestdir,'green_square.png' )  , True , False],
    [os.path.join(unittestdir,'blue_square.png' )  , True , False],
   
    [os.path.join(unittestdir,'magenta_square.png' )  , True , False],
    [os.path.join(unittestdir,'cyan_square.png' )  , True , False],
    [os.path.join(unittestdir,'yellow_square.png' )  , True , False],

    [os.path.join(unittestdir,'black_square.png' )  , False , False],
    [os.path.join(unittestdir,'grey_square.png' )  , False , False],
    [os.path.join(unittestdir,'white_square.png' )  , False , False],

]


class TestHistogram(ut.TestCase):
    
    def setUp(self):
        pass

    def test_init(self):
        for path, a,b in expectation :
            histo = Histogram(im.open(path), path,bins=256)
            if a :
                self.assertIsInstance(histo.histograms,ColorHistogram)
                self.assertNotIsInstance(histo.histograms,GreyHistogram)
            else :
                self.assertNotIsInstance(histo.histograms,ColorHistogram)
                self.assertIsInstance(histo.histograms,GreyHistogram)
            
            histo_grey = Histogram(im.open(path), path,bins=256, grey = True)
            self.assertIsInstance(histo_grey.histograms,GreyHistogram)



class TestColorHistogram(ut.TestCase):


    def test_init(self):
        pass

    #def test_histograms_length(self):
    #    for path, a,b in expectation :
    #        histo = Histogram(im.open(path), path,bins=256)
    #        self.assertEqual(len(histo.histograms.get_red()), histo1.bins)
    #        self.assertEqual(len(histo.histograms.get_green()), histo1.bins)
    #        self.assertEqual(len(histo.histograms.get_blue()), histo1.bins)

    #def test_red_square(self):
    #    """TODO problem
    #    When color value is 255, the histogram pass it to 0"""
    #    histo1 = Histogram(red_square)
#
    #    expected_red = [0 for i in range(256)]
    #    expected_red[255] = 10000
    #    #print(expected_red)
    #    #print(histo1.histograms.get_red())
    #    self.assertListEqual(list(histo1.histograms.redHistogram[0]),expected_red)

        #histo1 = Histogram(red_square)
        #expected_blue_green = [0 for i in range(256)]
        #expected_blue_green[0] = 100
        #
        #self.assertListEqual(list(histo1.histograms.get_blue()),expected_blue_green)
        #self.assertListEqual(list(histo1.histograms.get_green()),expected_blue_green)

        #Red histograms from get_red() doesn't seem to work correctly
        #expected_red = [0 for i in range(256)]
        #expected_red[254] = 100
        #print(expected_red)
        #print(histo1.histograms.get_red())
        #self.assertListEqual(list(histo1.histograms.redHistogram[0]),expected_red)
        pass



class TestGreyHistogram(ut.TestCase):

    def test_init(self):
        pass

    def test_get_grey(self):
        pass
        """DOESN'T work"""
        #histo1 = Histogram(black_square)
        #expected_result = [0 for i in range(256)]
        #expected_result[0] = 100
        #self.assertListEqual(list(histo1.histograms.get_grey()),expected_result)


        #histo2 = Histogram(255 - black_square)
        #print(255- black_square)
        #expected_result = [0 for i in range(256)]
        #expected_result[255] = 100
        #self.assertListEqual(list(histo2.histograms.get_grey()),expected_result)
        pass



if __name__ == '__main__':
    ut.main()