#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import os
import csv
import pickle
from Histogram import Histogram
from Image import Image, check_extension
import shutil

class Database:

    def __init__(self,directory):
        """
        The path to the directory is given as a String.
        """
        assert type(directory) is str, "Database: the path to the directory must be given as a String, it can not be {type(directory)}"
        assert os.path.exists(directory), "Database: The path given leads nowhere, please fix this issue before trying again."
        assert os.path.isdir(directory), "Database: The path given does not lead to a directory, please fix this issue before trying again."
        self._database = directory

    def _calculate_histogram(self,file):
        print(file)
        #calculate the histogram
        histo = Histogram(Image(self._database+os.sep+file))
        #save the histogram in the database
        name = file[:len(file)-4]+'_hist'
        with open(self._database+os.sep+name,'wb+') as histo_file:
            pickle.dump(histo,histo_file,protocol=pickle.HIGHEST_PROTOCOL)
        #returns path to histogram file
        return self._database+os.sep+name


    def _calculate_histograms(self):
        """
        Computes all images in the database to create their histograms, then stocks them.
        """
        #TODO recursive version for complex databases
        #TODO optimize
        files = os.listdir(self._database)

        #if histograms.csv exists in the database
        if 'histograms.csv' in files :
            #first find all images that already had their histogram created
            with open(self._database+os.sep+'histograms.csv','r') as csv_file :
                filereader = csv.reader(csv_file)
                images_ready = []
                for item in list(filereader) :
                    if len(item)>0 :
                        images_ready.append(item[0])
            #then add the new images
            with open(self._database+os.sep+'histograms.csv','a') as csv_file :
                filewriter = csv.writer(csv_file)
                #we'll consider the images that do not already have their histogram
                for file in files :
                    if check_extension(file) and os.path.relpath(file) not in images_ready :
                        histo = self._calculate_histogram(file)
                        #save the path to image and the histogram in csv
                        filewriter.writerow([os.path.relpath(file),os.path.relpath(histo)])

        #if there is no histograms.csv file already existing in the directory
        else:
            with open(self._database+os.sep+'histograms.csv','w') as csv_file :
                filewriter = csv.writer(csv_file,delimiter=',')
                for file in files:
                    #we only consider valid image formats
                    if check_extension(file) :
                        histo = self._calculate_histogram(file)
                        #save the path to image and the histogram in csv
                        filewriter.writerow([os.path.relpath(file),os.path.relpath(histo)])

    def histograms(self):
        """
        Returns list of (pointer to image,histogram) for each image in the base.
        """
        files = os.listdir(self._database)
        res = []
        #find the histograms.csv file
        if 'histograms.csv' in files :
            with open(self._database+os.sep+'histograms.csv','r') as csv_file :
                #read the file to find the histograms
                filereader = csv.reader(csv_file)
                for item in filereader :
                    #to skip blank lines
                    if len(item)>0:
                        #unpickle the histogram
                        histo = None
                        with open(item[1],'rb') as pickled_histo :
                            histo = pickle.load(pickled_histo)
                        res.append((item[0],histo))
        else :
            print("Caution : the histograms were never calculated for this database.")

        return res


    def images(self):
        """
        Returns a list containing pointers to all images in the database
        """
        files = os.listdir(self._database)
        res = []
        if check_extension(file in files):
            res.append(file)
        return res



    def add(self,img,histo):
        """
        Returns true if couple was correctly added to the database.
        Arguments :
            img : the path to the image file to be added
            histo : the Histogram object of the image
        """
        files = os.listdir(self._database)
        #add image
        name_img = os.path.basename(str(img))
        new_path = os.path.relpath(self._database+os.sep+name_img)
        shutil.copy(str(img),new_path)
        #save the histogram in the database
        name_histo = new_path[:-4]+'_hist'
        with open(name_histo,'wb+') as histo_file :
            pickle.dump(histo,histo_file,protocol=pickle.HIGHEST_PROTOCOL)
        #check if database isn't empty
        if 'histograms.csv' in files :
            with open(self._database+os.sep+'histograms.csv','a') as csv_file :
                print(os.path.relpath(name_histo))
                #we add the couple of adresses to the csv file
                filewriter = csv.writer(csv_file)
                filewriter.writerow([os.path.relpath(name_img),os.path.relpath(name_histo)])
        #this image is the first in the base
        else :
            print("This is the first image added to that base")
            with open(self._database+os.sep+'histograms.csv','w+') as csv_file :
                #we add the couple of adresses to the csv file
                filewriter = csv.writer(csv_file)
                filewriter.writerow([os.path.relpath(img),os.path.relpath(name_histo)])
