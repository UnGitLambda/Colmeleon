# -*- coding: utf-8 -*-
"""
@author: Eyal Cohen
"""

try:
    import sys
except Exception as e:
    print("\nError message :" + str(e) + "\n")
    print("It seems that the module 'sys' is not installed on your computer (or not accessible via PATH), please install it for PAFtoAF and PAFtoAFGUI to work properly.\n")
    print("You should be able to install it using the command :\npython -m pip install sys")
    exit()

try:
    import ctypes
except Exception as e:
    print("\nError message :" + str(e) + "\n")
    print("It seems that the module 'ctypes' is not installed on your computer (or not accessible via PATH), please install it for PAFtoAFcheckup to work properly.\n")
    print("You should be able to install it using the command :\npython -m pip install ctypes")
    sys.exit()

def Mbox(title, text, style):
    return ctypes.windll.user32.MessageBoxW(0, text, title, style)

import matplotlib
matplotlib.use("TkAgg")
import tkinter as tk
from tkinter import DISABLED, NORMAL
from tkinter import TOP, LEFT
import __main__

class HelpWindow():
    def __init__(self, app):
        assert isinstance(app, __main__.Application) 
        self.application = app
        self.helpWindow = tk.Tk()
        self.helpWindow.title("help")
        self.helpWindow.geometry("686x480")
        self.helpWindow.config(bg = "#dddddd")
        self.help_frame = tk.Frame(self.helpWindow, height = 30, width = 86)
        self.help_frame.pack()
        self.accepted_help_text = tk.Text(self.help_frame, height = 4, width = 84)
        self.accepted_help_text.pack(side = TOP)
        self.help_text = tk.Text(self.help_frame, height = 28, width = 84, state = DISABLED)
        self.buttonsframe = tk.Frame(self.help_frame, height = 5, width = 84)
        self.buttonsframe.pack(side = TOP)
        self.segButton = tk.Button(self.buttonsframe, text = "Segmentation", bg = "white", activebackground = "red", command = self.show_segmentation)
        self.retrButton = tk.Button(self.buttonsframe, text = "Retrieval", bg = "white", activebackground = "red", command = self.show_retrieval)
        self.segButton.pack(side = LEFT)
        self.retrButton.pack(side = LEFT)
        self.help_text.pack(side = TOP)
        self.accepted_help_text.insert("end", "The help about technical terms about :\nSegmentation of an image based on a compact representation of the color histogram.\n")
        self.accepted_help_text["state"] = DISABLED
        self.helpWindow.protocol("WM_DELETE_WINDOW", self.on_closing_help)
    def show_segmentation(self):
        self.help_text["state"] = NORMAL
        self.help_text.delete("1.0", "end")
        self.help_text.insert("end", "\nThe segmentation consists in separating differents regions of the\nimage, based on characteristics.\n")
        self.segButton["bg"] = "red"
        self.segButton["state"] = DISABLED
        self.retrButton["bg"] = "white"
        self.retrButton["state"] = NORMAL
        self.help_text["state"] = DISABLED
    def show_retrieval(self):
        self.help_text["state"] = NORMAL
        self.help_text.delete("1.0", "end")
        self.help_text.insert("end", "\nThe retrieval consists in getting items from\nthe database.\n")
        self.retrButton["bg"] = "red"
        self.retrButton["state"] = DISABLED
        self.segButton["bg"] = "white"
        self.segButton["state"] = NORMAL
        self.help_text["state"] = DISABLED
    def on_closing_help(self):
        self.application.helpWindow = None
        self.application.helpOpen = False
        self.helpWindow.destroy()
        del(self)
    def lift(self):
        self.helpWindow.lift()
        self.helpWindow.focus_force()
        self.helpWindow.grab_set()
        self.helpWindow.grab_release()