# -*- coding: utf-8 -*-
import copy
import sys
import os

from Histogram import ColorHistogram, GreyHistogram, Histogram
from Database import Database
import matplotlib.pyplot as plt
from Image import Image

def intersection(histo_image, histo_model):
    """This function calculates the intersection of two histograms"""
    assert type(histo_image) is Histogram
    assert type(histo_model) is Histogram
    histo=[]
    bin= histo_model.bins if histo_image.bins>histo_model.bins else histo_image.bins
    if isinstance(histo_image, ColorHistogram) and isinstance(histo_model, ColorHistogram):      
        histo.append([])
        histo.append([])
        histo.append([])
        for j in range(bin):
            histo[0].append(min(histo_image.histograms.get_red()[j], histo_model.histograms.get_red()[j]))
            histo[1].append(min(histo_image.histograms.get_blue()[j], histo_model.histograms.get_blue()[j]))
            histo[2].append(min(histo_image.histograms.get_green()[j], histo_model.histograms.get_green()[j]))
        return histo
    if isinstance(histo_image, GreyHistogram) and isinstance(histo_model, GreyHistogram):
        for j in range(bin):
            histo.append(min(histo_image.histograms.get_grey()[j], histo_model.histograms.get_grey()[j]))
        return histo
    if isinstance(histo_image, GreyHistogram) and isinstance(histo_model, ColorHistogram):
        his = ColorHistogram.transformation_grey(histo_model)
        for j in range(bin):
            histo.append(min(his()[j], histo_image.histograms.get_grey()[j]))
        return histo
    if isinstance(histo_image, ColorHistogram) and isinstance(histo_model, GreyHistogram):
        his = ColorHistogram.transformation_grey(histo_image)
        for j in range(bin):
            histo.append(min(his()[j], histo_model.histograms.get_grey()[j]))
        return histo

def match_value(histo_image, histo_model, function = intersection):
    """This function calculates the percentage of correspondence between two histograms."""
    assert type(histo_image) is Histogram
    assert type(histo_model) is Histogram

    histo = function(histo_image, histo_model)
    pixels = sum(histo_model.get_red() if isinstance(histo_model, ColorHistogram) else histo_model.get_grey())
    r=0
    b=0
    g=0
    grey=0
    if isinstance(histo_image, ColorHistogram) and isinstance(histo_model, ColorHistogram):
        for i in histo_model.bins:
            r+=histo[0][i]
            b+=histo[1][i]
            g+=histo[2][i]
        value = min([r/pixels,b/pixels,g/pixels])
    else: 
        for i in histo_model.bins:
            grey = histo[i] + grey
        value = grey/pixels
    return value*100

def color_axes(histo) :
    """
    This function will create the color axes used in incremental intersection
    """
    assert type(histo) is Histogram
    assert type(histo.histograms) is ColorHistogram

    r = histo.histograms.get_red()
    g = histo.histograms.get_green()
    b = histo.histograms.get_blue()
    rg = r - g
    by = 2 * b - r -g
    wb = r + g + b
    return [int(rg/16),int(by/16),int(wb/8)]

def offline(database):
    assert type(database) is Database

    
def incremental_intersection(histo_image, histo_model):
    """This function calculates the intersection of two histograms, evaluating only the largest bins of the histograms"""
    assert type(histo_image) is Histogram
    assert type(histo_model) is Histogram

    """
    offline
    take all img from database
    create histo all of it
    assign key to each bins
        ==> calculate nb pixel
        use double list ?
        can a bin have same key as another one

    group bins by index color
        color are the color axes rg wb by
        3 groups
    
    Sort each group by key
        ex rg wb by
        ou wb by rg
        ou rg by wb

    
    online
    trier les bins de notre image  en decroissant
    pour les B plus grands  bins commancant par les + grands
    Faire correspondre ceux qui ont le même index couleur et qui ont la plus grosse clé
    """




def retrieval(depth=15):
    """This function calculates the closest matching images in the database. It returns as many images as the value of depth argument"""
    assert type(depth) is int

def label_images(img):
    """This function is a labelling of a given image according to potential(s) caracteristic(s)"""
    assert type(img) is Image

def cluster(db):
    """Groups the images in the database according to the labels that have been assigned to them"""
    assert type(db) is Database

def _add_database():
    """If the no_add argument of the application is false, this function is called then calls the add function of Database to add each image and its color histogram to the database"""

    