import os
import csv
import pickle
from Histogram import Histogram
from Image import Image

class Database:

    def __init__(self,directory):
        """
        The path to the directory is given as a String.
        """
        assert type(directory) is str, "Database: the path to the directory must be given as a String, it can not be {type(directory)}"
        assert os.path.exists(directory), "Database: The path given leads nowhere, please fix this issue before trying again."
        assert os.path.isdir(directory), "Database: The path given does not lead to a directory, please fix this issue before trying again."
        self._database = directory

    def _calculate_histograms_(self):
        """
        Computes all images in the database to create their histograms, then stocks them.
        """
        #TODO recursive version for complex databases
        #TODO optimize
        files = os.listdir(self._database)

        #if histograms.csv exists in the database
        if 'histograms.csv' in files :
            with open(self._database+os.sep+'histograms.csv','a') as csv_file :
                filewriter = csv.writer(csv_file)
                #getting the list of images already paired from the csv file
                filereader = csv.reader(csv_file)
                images_ready = [item[0] for item in list(filereader)]
                #we'll consider the images that do not already have their histogram
                for file in files :
                    if file.endswith("png") or file.endswith("pdf") or file.endswith("jpg") or file.endswith("jpeg") or file.endswith("bmp") or file.endswith("gif") and os.path.relpath(file) not in images_ready :
                        histo = Histogram(Image(self._database+os.sep+file))
                        #save the path to image and the histogram in csv
                        filewriter.writerow(os.path.relpath(file),pickle.dumps(histo))

        #if there is no histograms.csv file already existing in the directory
        else:
            with open(self._database+os.sep+'histograms.csv','w+') as csv_file :
                filewriter = csv.writer(csv_file)
                for file in files:
                    #we only consider valid image formats
                    if file.endswith("png") or file.endswith("pdf") or file.endswith("jpg") or file.endswith("jpeg") or file.endswith("bmp") or file.endswith("gif") :
                        print(file)
                        histo = Histogram(Image(self._database+os.sep+file))
                        histo_pickled= pickle.dumps(histo)
                        print(histo_pickled)
                        #save the path to image and the histogram in csv
                        filewriter.writerow(os.path.relpath(file),histo_pickled)

    def histograms(self):
        """
        Returns list of (pointer to image,histogram) for each image in the base.
        """
        files = os.listdir(self._database)
        res = []
        #find the histograms.csv file
        if 'histograms.csv' in files :
            with open('histograms.csv','r') as csv_file :
                #read the file to find the histograms
                filereader = csv.reader(csv_file)
                path_list = list(filereader)
                for item in path_list :
                    #unpickle the histogram
                    histo = pickle.loads(item[1])
                    res.append(item[0],histo)
        else :
            print("Caution : the histograms were never calculated for this database.")
            return res


    def images(self):
        """
        Returns table containing pointers to all images in the database
        """

    def add(self,img,histo):
        """
        Returns true if couple was correctly added to the database.
        Arguments :
            img : the path to the image file to be added
            histo : the Histogram object of the image
        """
        files = os.listdir(self._database)
        #add image

        #save the histogram in the database
        name = img[:len(img)-3]+'hist'
        with open(name,'w+') as histo_file:
            pickle.dump(histo,histo_file,protocol=pickle.HIGHEST_PROTOCOL)
        #check if database isn't empty
        if 'histograms.csv' in files :
            with open('histograms.csv','a') as csv_file :
                #we add the couple of adresses to the csv file
                filewriter = csv.writer(csv_file)

                #save the paths to image and histogram in csv
                filewriter.writerow(os.path.relpath(img),os.path.relpath(histo_file))
